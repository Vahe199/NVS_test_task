{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchUsers } from \"./ActionCreators\";\nconst initialState = {\n  users: [],\n  isLoading: false,\n  error: '',\n  count: 0\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    increment(state, action) {\n      state.count += action.payload;\n    }\n\n  },\n  extraReducers: {\n    [fetchUsers.pending.type]: state => {\n      state.isLoading = true;\n    },\n    [fetchUsers.fulfilled.type]: (state, action) => {\n      state.isLoading = false;\n      state.error = '';\n      state.users = action.payload;\n    },\n    [fetchUsers.rejected.type]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  increment\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","fetchUsers","initialState","users","isLoading","error","count","userSlice","name","reducers","increment","state","action","payload","extraReducers","pending","type","fulfilled","rejected","actions","reducer"],"sources":["C:/Users/Doc/Desktop/text_task/src/store/reducers/UserSlice.ts"],"sourcesContent":["import {ICat} from \"../types/ICat\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {fetchUsers} from \"./ActionCreators\";\n\ninterface UserState {\n    users: ICat[];\n    isLoading: boolean;\n    error: string;\n    count: number\n}\n\nconst initialState: UserState = {\n    users: [],\n    isLoading: false,\n    error: '',\n    count: 0\n}\n\nexport const userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        increment(state, action: PayloadAction<number>) {\n            state.count += action.payload\n        }\n    },\n    extraReducers: {\n        [fetchUsers.pending.type]: (state) => {\n            state.isLoading = true;\n        },\n        [fetchUsers.fulfilled.type]: (state, action: PayloadAction<ICat[]>) => {\n            state.isLoading = false;\n            state.error = '';\n            state.users = action.payload\n        },\n        [fetchUsers.rejected.type]: (state, action: PayloadAction<string>) => {\n            state.isLoading = false;\n            state.error = action.payload;\n\n        }\n    }\n})\nexport const {increment} = userSlice.actions;\nexport default userSlice.reducer;\n\n"],"mappings":"AACA,SAAQA,WAAR,QAAyC,kBAAzC;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AASA,MAAMC,YAAuB,GAAG;EAC5BC,KAAK,EAAE,EADqB;EAE5BC,SAAS,EAAE,KAFiB;EAG5BC,KAAK,EAAE,EAHqB;EAI5BC,KAAK,EAAE;AAJqB,CAAhC;AAOA,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;EACjCQ,IAAI,EAAE,MAD2B;EAEjCN,YAFiC;EAGjCO,QAAQ,EAAE;IACNC,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAuC;MAC5CD,KAAK,CAACL,KAAN,IAAeM,MAAM,CAACC,OAAtB;IACH;;EAHK,CAHuB;EAQjCC,aAAa,EAAE;IACX,CAACb,UAAU,CAACc,OAAX,CAAmBC,IAApB,GAA4BL,KAAD,IAAW;MAClCA,KAAK,CAACP,SAAN,GAAkB,IAAlB;IACH,CAHU;IAIX,CAACH,UAAU,CAACgB,SAAX,CAAqBD,IAAtB,GAA6B,CAACL,KAAD,EAAQC,MAAR,KAA0C;MACnED,KAAK,CAACP,SAAN,GAAkB,KAAlB;MACAO,KAAK,CAACN,KAAN,GAAc,EAAd;MACAM,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAArB;IACH,CARU;IASX,CAACZ,UAAU,CAACiB,QAAX,CAAoBF,IAArB,GAA4B,CAACL,KAAD,EAAQC,MAAR,KAA0C;MAClED,KAAK,CAACP,SAAN,GAAkB,KAAlB;MACAO,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAArB;IAEH;EAbU;AARkB,CAAD,CAA7B;AAwBP,OAAO,MAAM;EAACH;AAAD,IAAcH,SAAS,CAACY,OAA9B;AACP,eAAeZ,SAAS,CAACa,OAAzB"},"metadata":{},"sourceType":"module"}